#!/usr/bin/env python

import cv2, time
from pyzbar import pyzbar
from ros_module import *
#from dqn_drive import *
from parking2 import *
#from ultrasonic_drive import *
#from yolo_drive import *
from go_backward import *

rm = ROS("team_name")

angle = 0
speed = 20
mode = ""
ar_qr_check = False
check_turn=False

obj = {
    #"DQNQR":DQN([256, 256], ""),
    "PARKQR":PARK(),
    "ULTRASONICQR":ULTRASONIC(),
    #"YOLOQR":YOLO(),
    "BACKWARDQR":BACKWARD()
}


while rm.get_shutdown():
    camera_image = rm.get_camera_image_data()
    
    #cv2.imshow('frame', camera_image) 
    if not camera_image.size == (640*480*3):
        continue
       
    qrcodes = pyzbar.decode(camera_image.copy())
    #print(qrcodes)   
    for qtcode in qrcodes:
        qr_string = qtcode.data
        #mode = qr_string
	if qr_string=="algorithm drive_avoid_obstacle":
     	    mode="ULTRASONICQR"

        elif qr_string =="2 algorithm drive_turn_back":
            mode="BACKWARDQR"
        '''
        elif qr_string =="dqn dqn_drive_start":
            mode="DQNQR"
        elif qr_string =="dqn dqn_drive_end":
            mode="YOLOQR"
        '''
        if qr_string =="9 ar parking" or mode == "7 algorithm drive_to_parking_lot_1":
            mode="PARKQR"


        print("mode : "+str(mode))

    if mode== "":
	rm.set_motor(0,0)    
        continue

    
    #obj[mode].set_motor(angle, speed)
    
    '''
    if mode == "DQNQR":
        obj[mode].set_data([])
    
    elif mode == "YOLOQR":
        obj[mode].set_data([])
    '''
    if mode == "ULTRASONICQR":
        obj[mode].set_data([rm.get_ultrasonic_data()])
	rm.set_motor(angle, speed)

    elif mode == "BACKWARDQR":
        
        if check_turn==False:
            for j in range(5):

                for i in range(30):
	            obj[mode].set_data(False)
	            angle, speed = obj[mode].get_motor()
                    rm.set_motor(angle, speed)
                    time.sleep(0.1)
                for i in range(30):
                    obj[mode].set_data(True)
                    angle, speed = obj[mode].get_motor()
                    rm.set_motor(angle, speed)
                    time.sleep(0.1)
            check_turn = True
        
        else:
            mode=="dqn dqn_drive_start"
            rm.set_motor(0,20)
		
    elif mode == "PARKQR":
        obj_ar = obj[mode]
        
        ar_data = rm.get_ar_tags_datas()
        if not ar_qr_check:
            for _ range(2):
                rm.set_motor(0,0)
            for _ in range(10):
                rm.set_motor(-20,20)
                time.sleep(0.1)
            ar_qr_check = True

        obj_ar.set_data(ar_data)
        print(obj_ar.is_back,obj_ar.arData["DZ"],obj_ar.pitch) 
        if obj_ar.is_back:
            for _ in range(2):
                rm.set_motor(0,0)
                time.sleep(0.1)
            for _ in range(21):
                #rm.set_motor(obj_ar.angle,obj_ar.speed)
                rm.set_motor(20,-30)
                time.sleep(0.1)
            for _ in range(7):
                #rm.set_motor(-obj_ar.angle,obj_ar.speed)
                rm.set_motor(-20,-30)
                time.sleep(0.1)
        else:
            rm.set_motor(obj_ar.angle,obj_ar.speed)
            time.sleep(0.1)
    elif mode == "BACKWARDQR":
        pass 
    #angle, speed = obj[mode].get_motor() 
    #rm.set_motor(angle, speed)
    
    
    
